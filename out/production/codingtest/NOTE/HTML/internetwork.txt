
IP
지정한 IP주소에 데이터 전달
패킷이라는 통신 단위로 데이터 전달
패킷 정보(출발지, 목적지ip, 전송데이터)


TCP
패킷 정보
출발지, 목적지 IP
춥발지 목적지 포트, 전송 제어, 순서, 검증정보 등

클라이언트 서버 연결 체크
3WAY HANDSHAKE
1. SYN -> 2. SYN+ACK ->3. ACK ->4, 데이터 전송
요즘은 최적화가 되어서 3 ACK를 보낼떄 4. 데이터도 같이 전송

데이터 전달 보증
1. 데이터 전송 2. 데이터 받음 수신

순서 보장
1. 패킷 1, 2, 3 순서로 전송 -> 패킷 1, 3, 2 순서로 도착(순서가 바뀜) -> 서버측에서 패킷 2부터 다시보내라고 메시지 전송(TCP 패킷의 순서정보)

UDP
기능이 거의 없음
IP와 거의 같음 + 포트 + 체크섬(검증)
속도 빠름(현재는 대부분 TCP사용)
TCP는 수정이 힘듬, UDP는 도화지와 같아서 수정가능(최근 최적화로 각광받고있음)

PORT
같은 IP내에서 프로세스 구분
EX)게임은 80번 포트, 크롬은 88번 포트 사용
100.100.100.0:80  IP:PORT
IP=아파트 PORT=101동
0~1023:WELL KNOWN PORT 사용하지 않는게 좋음

DNS(도메인 네임 서비스)
IP주소는 바뀔수 있음
도메인명      IP
naver.com 200.111.11
->DNS를 사용하면 IP주소가 바뀌어도 DNS로 매칭 가능

URI
(URI, URL, URN)의 분류
URI(URL(Locator), URN(Name)) ->URI 안에 두 개념이 들어있음
평소의 주소가 URL(리소스 위치를 지정 /store/book), URN은 이름으로 만들어진 주소
scheme://[userinfo@]host[:port]/[/path][?query][#fragment]
https://www.google.com:443/search?q=hello&hl=ko

HTTP/1.1 : 현재 가장 많이 사용하는 버전
HTTP/2 : 2015년 성능 개선 버전
HTTP/3 진행중 : TCP 대신에 UDP 사용, 성능 개선

Stateful, Stateless
Stateful->항상 같은 서버가 유지되어야 한다
Stateless->무상태는 응답 서버를 쉽게 바꿀 수 있음->무한한 서버 증설 가능, 상태를 보관하지 않음
무상태)로그인이 필요 없는 단순한 서비스 소개 화면
상태)로그인

HTTP는 기본적으로 연결을 유지하지 않는 모델(비연결성)
같은 시간에 딱 맞추어 발생하는 대용량 트래픽->Stateless 설계가 중요

리소스와 행위를 분리
ex)회원 조회, 회원 가입
리소스-> 회원 행위->조회, 가입입

GET:리소스 조회, POST:요청 데이터 처리 PUT:리소스를 대체, 없으면 생성(파일 업로드, 없으면 파일 생성)
조회데이터는 GET , 그외 데이터가 변경되거나 프로세스가 변경될떄는 POST

PUT:기존 리소스를 완전히 대체(기존 리소스 삭제) , 없으면 생성(덮어버림)
POST 차이점 클라이언트가 리소스를 식별(리소스 위치를 알고 URI지정)
!애매하면 POST를 사용

PATCH(리소스 부분 변경), DELETE(리소스 제거)

안전
호출해도 리소스를 변경하지 않는다 변경 하지 않는 것 EX)GET

멱등
한 번 호출하든 몇 번 호출하든 결과가 같아야함
EX) GET(몇번 조회하든 결과가 변함이 없음), PUT(몇번 덮어씌워도 결과가 같음), DELETE
POST(멱등이 아님 결제, 정보 입력 몇번 하면 중복됨)

멱등의 활용
GET, DELETE등 메서드를 보냈을떄 결과가 돌아오지 않을떄 같은 요청을 계속 보내도 되는가 판단 근거
!멱등은 중간에 리소스가 변경되는 것 까지는 고려하지 않음 EX)GET으로 조회 했을때 다른 사용자가 PUT를 이용하여 값을 변경함

캐시가능
웹 브라우저가 내부에 리소스를 저장해서 사용이 가능한가?
GET, HEAD 캐시사용 가능 ,POST, PATCH가능하나 어려움

데이터 전달 방식은 크게 2가지
1.쿼리 파라미터를 통한 데이터 전송 GET
2.메시지 바디를 통한 데이터 전송  POST PUT

전송이 POST면 메시디 바디에 KEY=VALUE 형식으로 정보값이 나타나고 GET이면 URL에 그대로 나타남
->그러므로 GET은 조회에만 사용해야함

HTTP API -> HTML FORM을 사용하지 않는 상황

POST로 회원 등록 ->서버가 리소스 URI를 생성 (컬렉션)
PUT로 회원 등록 -> 클라이언트가 직접 리소스의 URI를 지정 (스토어)
대부분 POST방식을 사용